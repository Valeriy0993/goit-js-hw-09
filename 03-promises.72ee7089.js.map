{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAG4CC,SAAnCC,iBAAiB,oBAAoB,WAgBjB,SAAlBC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,GACFF,EAAQ,CAAEH,WAAUC,UACpBN,EAAAc,OAAgBC,QACd,uBAAwCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,SAGhDG,EAAO,CAAEJ,WAAUC,UACnBN,EAAAc,OAAgBG,QACd,sBAAuCD,OAAfX,EAAS,QAAYW,OAANV,EAAM,O,GAGhDA,E,IA9BcJ,SAAZgB,cAAc,SAASf,iBAAiB,UAAU,SAAUgB,GACnEA,EAAMC,iBAGqB,IAArBC,EAAeF,EAAMG,OAAOC,UA+BK,SAAjBC,EAAYC,EAAMC,GACxC,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAQC,IAAK,CAGhCvB,EAAcuB,EAFAH,GAAcG,EAAI,GAAKF,GAGlCG,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAEOwB,QAAhBC,IAAI,uBAAwCf,OAAfX,EAAS,QAAYW,OAANV,EAAM,M,IAE3D0B,OAAM,SAAAH,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAEOwB,QAAjBC,IAAI,sBAAqCf,OAAfX,EAAS,QAAYW,OAANV,EAAM,M,KApC5B2B,CALdC,SAASb,EAAaf,MAAM6B,MAAO,IACzCD,SAASb,EAAaI,KAAKU,MAAO,IAChCD,SAASb,EAAaK,OAAOS,MAAO,I","sources":["src/js/03-promises.js"],"sourcesContent":["const Notiflix = require('notiflix');\n\n// Обгортка DOMContentLoaded для виклику коду при повному завантаженні DOM\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Обробник події submit для форми\n  document.querySelector('.form').addEventListener('submit', function (event) {\n    event.preventDefault();\n\n    // Отримання значень з полів форми\n    const formElements = event.target.elements;\n    const firstDelay = parseInt(formElements.delay.value, 10);\n    const step = parseInt(formElements.step.value, 10);\n    const amount = parseInt(formElements.amount.value, 10);\n\n    // Виклик функції для створення промісів\n    createPromises(firstDelay, step, amount);\n  });\n\n  // Функція для створення промісів\n  function createPromise(position, delay) {\n    return new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        } else {\n          reject({ position, delay });\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        }\n      }, delay);\n    });\n  }\n\n  // Функція для створення промісів з використанням createPromise\n  function createPromises(firstDelay, step, amount) {\n    for (let i = 1; i <= amount; i++) {\n      const delay = firstDelay + (i - 1) * step;\n\n      createPromise(i, delay)\n        .then(({ position, delay }) => {\n          // Обробка виконаного промісу\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          // Обробка відхиленого промісу\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    }\n  }\n});\n"],"names":["$6JpON","parcelRequire","document","addEventListener","createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","Notify","success","concat","failure","querySelector","event","preventDefault","formElements","target","elements","firstDelay","step","amount","i","then","param","console","log","catch","createPromises","parseInt","value"],"version":3,"file":"03-promises.72ee7089.js.map"}